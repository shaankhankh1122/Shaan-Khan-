const fs = require("fs");
const path = require("path");
const axios = require("axios");

module.exports.config = {
  name: "ytdl",
  hasPermission: 0,
  version: "1.0.1",
  description: "Download full YouTube videos (not shorts)",
  credits: "SHANKAR",
  usePrefix: false,
  commandCategory: "Utility"
};

module.exports.handleEvent = async function ({ api, event }) {
  const message = event.body;

  // ‡§∏‡§ø‡§∞‡•ç‡§´ normal ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§™‡§ï‡§°‡§º‡•ã (shorts ‡§≤‡§ø‡§Ç‡§ï ‡§ï‡•ã ‡§∏‡•ç‡§ï‡§ø‡§™ ‡§ï‡§∞‡•ã)
  const youtubeRegex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
  const match = message.match(youtubeRegex);

  if (match) {
    const url = match[0];

    try {
      const waitingMessage = await api.sendMessage(`‚è≥ | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à...`, event.threadID);

      const apiUrl = `https://prince-malhotra-yt-download-cvp0.onrender.com/api/ytdl?url=${encodeURIComponent(url)}&type=mp4`;
      const response = await axios.get(apiUrl);
      const data = response.data?.data;

      if (!data || !data.download) {
        await api.sendMessage(`‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ã‡§à ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§`, event.threadID);
        return;
      }

      // Check if video is a short (duration < 1 minute)
      const durationInSec = parseFloat(data.duration?.replace(/[^\d.]/g, "") || "0");
      if (durationInSec < 60) {
        await api.sendMessage(`‚ö†Ô∏è | ‡§Ø‡§π ‡§∂‡•â‡§∞‡•ç‡§ü ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§´‡•Å‡§≤ ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§≤‡§ø‡§Ç‡§ï ‡§¶‡•á‡§Ç‡•§`, event.threadID);
        return;
      }

      const downloadUrl = data.download;
      const title = data.title.replace(/[\\/:*?"<>|]/g, "");
      const filePath = path.resolve(__dirname, "cache", `${Date.now()}-${title}.mp4`);

      const videoResponse = await axios.get(downloadUrl, {
        responseType: "stream",
        headers: { "User-Agent": "Mozilla/5.0" }
      });

      const fileStream = fs.createWriteStream(filePath);
      videoResponse.data.pipe(fileStream);

      fileStream.on("finish", async () => {
        const stats = fs.statSync(filePath);
        const fileSizeInMB = stats.size / (1024 * 1024);

        if (fileSizeInMB > 25) {
          await api.sendMessage(`‚ùå | "${title}" ‡§ï‡§æ ‡§∏‡§æ‡§á‡§ú ${fileSizeInMB.toFixed(2)}MB ‡§π‡•à, ‡§ú‡•ã 25MB ‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§π‡•à‡•§\nüì• ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§≤‡§ø‡§Ç‡§ï: ${downloadUrl}`, event.threadID);
          fs.unlinkSync(filePath);
          return;
        }

        await api.sendMessage({
          body: `üé• | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã "${title}" ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à!`,
          attachment: fs.createReadStream(filePath)
        }, event.threadID);

        fs.unlinkSync(filePath);
        api.unsendMessage(waitingMessage.messageID);
      });

      videoResponse.data.on("error", async (error) => {
        console.error(error);
        await api.sendMessage(`‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à: ${error.message}`, event.threadID);
        fs.unlinkSync(filePath);
      });

    } catch (error) {
      console.error(error);
      await api.sendMessage(`‚ùå | ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§™‡•ç‡§∞‡§æ‡§™‡•ç‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à: ${error.message}`, event.threadID);
    }
  }
};

module.exports.run = async function () {
  // Run command ‡§ï‡•ã ‡§ñ‡§æ‡§≤‡•Ä ‡§õ‡•ã‡§°‡§º‡§§‡•á ‡§π‡•à‡§Ç ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§Ø‡•á auto-detect ‡§π‡•à
};